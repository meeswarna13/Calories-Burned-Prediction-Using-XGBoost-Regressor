# -*- coding: utf-8 -*-
"""XGBoost_Calories Burnt Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PXyBMhwFHmMr-dT5xYOTYNPlbYwZnsdy
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn import metrics
from xgboost import XGBRegressor
import warnings
warnings.filterwarnings('ignore')

calorie = pd.read_csv('/content/calories.csv')
exercise = pd.read_csv('/content/exercise.csv')

df = pd.merge(calorie, exercise, on='User_ID')
df.head()

df.shape

df.isnull().sum()

df.info()

df.describe()

features = ['Age', 'Height', 'Weight', 'Duration','Heart_Rate','Body_Temp']
plt.subplots(figsize=(15, 10))
plt.xticks([])
plt.yticks([])
for i, col in enumerate(features):
    plt.subplot(3, 2, i + 1)
    x = df.sample(1000)
    # check if the column exists in the dataframe
    if col in x.columns:
        sns.scatterplot(x=x[col],y= x['Calories'])
plt.tight_layout()
plt.show()

plt.subplots(figsize=(15, 10))
plt.xticks([])
plt.yticks([])
for i, col in enumerate(features):
    plt.subplot(4, 2, i + 1)
    sns.boxplot(df[col])
plt.tight_layout()
plt.show()

# box plot after removing outliers.

def remove_outliers(df, col):
    # Check if the column is numeric
    if pd.api.types.is_numeric_dtype(df[col]):
        Q1 = df[col].quantile(0.25)
        Q3 = df[col].quantile(0.75)
        IQR = Q3 - Q1
        lower_bound = Q1 - 1.0 * IQR
        upper_bound = Q3 + 1.0 * IQR
        df_filtered = df[(df[col] >= lower_bound) & (df[col] <= upper_bound)]
        return df_filtered
    else:
        return df
plt.subplots(figsize=(15, 10))
plt.xticks([])
plt.yticks([])
for i, col in enumerate(features):
    plt.subplot(4, 2, i + 1)
    df_filtered = remove_outliers(df, col)
    sns.boxplot(df_filtered[col])
plt.tight_layout()
plt.show()

df.replace({'male': 0, 'female': 1},inplace=True)
df.head()

import matplotlib.pyplot as plt
import seaborn as sns
correlation_matrix = df.corr()
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='Blues')
plt.show()
correlation_with_calories = correlation_matrix['Calories'].drop('Calories')
feature_to_discard = correlation_with_calories.abs().idxmin()

print(f"The feature with the lowest correlation to 'Calories' is: {feature_to_discard}")

features = df.drop(['User_ID', 'Calories'], axis=1)
target = df['Calories'].values
X_train, X_test,Y_train, Y_test = train_test_split(features, target,test_size=0.2, random_state=22)
X_train.shape, X_test.shape

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

from sklearn.model_selection import KFold
from sklearn.metrics import mean_absolute_error as mae
features = df.drop(['User_ID', 'Calories'], axis=1)
target = df['Calories'].values

# Scale the features
scaler = StandardScaler()
features_scaled = scaler.fit_transform(features)

kf = KFold(n_splits=5, shuffle=True, random_state=22)

model = XGBRegressor(learning_rate=0.1, n_estimators=500)
mae_scores = []

# Perform K-Fold cross-validation
for train_index, test_index in kf.split(features_scaled):
    X_train, X_test = features_scaled[train_index], features_scaled[test_index]
    Y_train, Y_test = target[train_index], target[test_index]

    model.fit(X_train, Y_train)
    train_preds = model.predict(X_train)
    test_preds = model.predict(X_test)
    mae_score = mae(Y_test, test_preds)
    mae_scores.append(mae_score)

average_mae = np.mean(mae_scores)
print("K-Fold MAE Scores: ", mae_scores)
print(f'Average MAE: {average_mae:.3f}')
print('Training Error : ', mae(Y_train, train_preds))
print('Testing Error : ', mae(Y_test, test_preds))
print("Accuracy: ",model.score(X_test,Y_test))

print("*****CALORIES BURNED*****\nPlease enter the following details")
gender = int(input("Enter gender (0 for male, 1 for female): "))
age = float(input("Enter age: "))
height = float(input("Enter height (in cm): "))
weight = float(input("Enter weight (in kg): "))
duration = float(input("Enter duration (in minutes): "))
heart_rate = float(input("Enter heart rate: "))
body_temp = float(input("Enter body temperature: "))

new_data = pd.DataFrame({'Gender': [gender],'Age': [age],'Height': [height],'Weight': [weight],'Duration': [duration],'Heart_Rate': [heart_rate],
    'Body_Temp': [body_temp]})
new_data_scaled = scaler.transform(new_data)
predicted_calories = model.predict(new_data_scaled)
print("You have burned:", predicted_calories[0],"calories")

!pip install gradio --quiet

import gradio as gr
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor



def predict_calories(gender, age, height, weight, duration, heart_rate, body_temp):
    new_data = pd.DataFrame({'Gender': [gender], 'Age': [age], 'Height': [height],
                            'Weight': [weight], 'Duration': [duration],
                            'Heart_Rate': [heart_rate], 'Body_Temp': [body_temp]})
    new_data_scaled = scaler.transform(new_data)
    predicted_calories = model.predict(new_data_scaled)[0]
    return predicted_calories

iface = gr.Interface(
    fn=predict_calories,
    inputs=[
        gr.Radio(choices=[0, 1], label="Gender (0 for male, 1 for female)"),
        gr.Number(label="Age"),
        gr.Number(label="Height (in cm)"),
        gr.Number(label="Weight (in kg)"),
        gr.Number(label="Duration (in minutes)"),
        gr.Number(label="Heart Rate"),
        gr.Number(label="Body Temperature"),
    ],
    outputs="number",
    title="Calorie Burn Prediction",
    description="Enter your details to predict calories burned during exercise."
)

iface.launch()

!pip install gradio --quiet

import gradio as gr
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import XGBoostRegressor



def predict_calories(gender, age, height, weight, duration, heart_rate, body_temp):
    new_data = pd.DataFrame({'Gender': [gender], 'Age': [age], 'Height': [height],
                            'Weight': [weight], 'Duration': [duration],
                            'Heart_Rate': [heart_rate], 'Body_Temp': [body_temp]})
    new_data_scaled = scaler.transform(new_data)
    predicted_calories = model.predict(new_data_scaled)[0]
    return predicted_calories

iface = gr.Interface(
    fn=predict_calories,
    inputs=[
        gr.Radio(choices=[0, 1], label="Gender (0 for male, 1 for female)"),
        gr.Number(label="Age"),
        gr.Number(label="Height (in cm)"),
        gr.Number(label="Weight (in kg)"),
        gr.Number(label="Duration (in minutes)"),
        gr.Number(label="Heart Rate"),
        gr.Number(label="Body Temperature"),
    ],
    outputs="number",
    title="Calorie Burnt Prediction Using XGBoost Regressor",
    description="Enter your details to predict calories burned during exercise."
)

iface.launch()